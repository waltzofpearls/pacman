// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package main is a generated GoMock package.
package main

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// HandlerMock is a mock of handler interface.
type HandlerMock struct {
	ctrl     *gomock.Controller
	recorder *HandlerMockMockRecorder
}

// HandlerMockMockRecorder is the mock recorder for HandlerMock.
type HandlerMockMockRecorder struct {
	mock *HandlerMock
}

// NewHandlerMock creates a new mock instance.
func NewHandlerMock(ctrl *gomock.Controller) *HandlerMock {
	mock := &HandlerMock{ctrl: ctrl}
	mock.recorder = &HandlerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HandlerMock) EXPECT() *HandlerMockMockRecorder {
	return m.recorder
}

// addPackage mocks base method.
func (m *HandlerMock) addPackage(connection net.Conn, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{connection}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "addPackage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// addPackage indicates an expected call of addPackage.
func (mr *HandlerMockMockRecorder) addPackage(connection interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{connection}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addPackage", reflect.TypeOf((*HandlerMock)(nil).addPackage), varargs...)
}

// listPackages mocks base method.
func (m *HandlerMock) listPackages(connection net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listPackages", connection)
	ret0, _ := ret[0].(error)
	return ret0
}

// listPackages indicates an expected call of listPackages.
func (mr *HandlerMockMockRecorder) listPackages(connection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listPackages", reflect.TypeOf((*HandlerMock)(nil).listPackages), connection)
}

// removePackage mocks base method.
func (m *HandlerMock) removePackage(connection net.Conn, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{connection}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "removePackage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// removePackage indicates an expected call of removePackage.
func (mr *HandlerMockMockRecorder) removePackage(connection interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{connection}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removePackage", reflect.TypeOf((*HandlerMock)(nil).removePackage), varargs...)
}
