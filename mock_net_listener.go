// Code generated by MockGen. DO NOT EDIT.
// Source: net (interfaces: Listener)

// Package main is a generated GoMock package.
package main

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NetListenerMock is a mock of Listener interface.
type NetListenerMock struct {
	ctrl     *gomock.Controller
	recorder *NetListenerMockMockRecorder
}

// NetListenerMockMockRecorder is the mock recorder for NetListenerMock.
type NetListenerMockMockRecorder struct {
	mock *NetListenerMock
}

// NewNetListenerMock creates a new mock instance.
func NewNetListenerMock(ctrl *gomock.Controller) *NetListenerMock {
	mock := &NetListenerMock{ctrl: ctrl}
	mock.recorder = &NetListenerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NetListenerMock) EXPECT() *NetListenerMockMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *NetListenerMock) Accept() (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accept indicates an expected call of Accept.
func (mr *NetListenerMockMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*NetListenerMock)(nil).Accept))
}

// Addr mocks base method.
func (m *NetListenerMock) Addr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// Addr indicates an expected call of Addr.
func (mr *NetListenerMockMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*NetListenerMock)(nil).Addr))
}

// Close mocks base method.
func (m *NetListenerMock) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *NetListenerMockMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*NetListenerMock)(nil).Close))
}
